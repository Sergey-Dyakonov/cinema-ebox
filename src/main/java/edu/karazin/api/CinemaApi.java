/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package edu.karazin.api;

import edu.karazin.dto.Cinema;
import edu.karazin.dto.CinemaShow;
import edu.karazin.dto.FullSession;
import edu.karazin.dto.Movie;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-03-18T01:58:10.474290169Z[GMT]")
@Validated
public interface CinemaApi {

    @Operation(summary = "Get all cinema shows from the cinema", description = "Get all cinema shows from the cinema", tags = {"cinema"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Get list of all cinema shows", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CinemaShow.class)))),

            @ApiResponse(responseCode = "404", description = "Cinema not found")})
    @RequestMapping(value = "/cinema/{cinemaId}/cinemaShow",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<List<CinemaShow>> getCinemaShows(@Parameter(in = ParameterIn.PATH, description = "ID of cinema to return", required = true, schema = @Schema()) @PathVariable("cinemaId") Long cinemaId
    );


    @Operation(summary = "Get list of all cinemas", description = "Get list of all cinemas", tags = {"cinema"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "List of all cinemas", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cinema.class))))})
    @RequestMapping(value = "/cinema",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<List<Cinema>> getCinemas();


    @Operation(summary = "Get all movies from the cinema", description = "Get all movies from the cinema", tags = {"cinema"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Get list of all movies", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Movie.class)))),

            @ApiResponse(responseCode = "404", description = "Cinema not found")})
    @RequestMapping(value = "/cinema/{cinemaId}/movies",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<List<Movie>> getMovies(@Parameter(in = ParameterIn.PATH, description = "ID of cinema to return", required = true, schema = @Schema()) @PathVariable("cinemaId") Long cinemaId
    );


    @Operation(summary = "Get session", description = "Get session", tags = {"cinema"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "A session", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FullSession.class)))),

            @ApiResponse(responseCode = "404", description = "Cinema not found")})
    @RequestMapping(value = "/cinema/{cinemaId}/sessions/{sessionId}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<List<FullSession>> getSession(@Parameter(in = ParameterIn.PATH, description = "ID of cinema", required = true, schema = @Schema()) @PathVariable("cinemaId") Long cinemaId
            , @Parameter(in = ParameterIn.PATH, description = "ID of session", required = true, schema = @Schema()) @PathVariable("sessionId") Long sessionId
    );

}

